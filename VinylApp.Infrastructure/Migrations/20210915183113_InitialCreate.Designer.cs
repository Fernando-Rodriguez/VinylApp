// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VinylApp.Infrastructure.Persistence.DbContexts;

namespace VinylApp.Infrastructure.Migrations
{
    [DbContext(typeof(VinylAppContext))]
    [Migration("20210915183113_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupMembersId")
                        .HasColumnType("int");

                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.HasKey("GroupMembersId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.AlbumAggregate.AlbumItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlbumArtworkUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("AlbumName")
                        .HasColumnType("longtext");

                    b.Property<string>("ArtistName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AlbumItems");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.GroupAggregate.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("GroupInfo")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.UserAggregate.Auth.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserPass")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AuthUser");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.UserAggregate.OwnedAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AlbumInfo")
                        .HasColumnType("longtext");

                    b.Property<int?>("AlbumItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumItemId");

                    b.HasIndex("UserId");

                    b.ToTable("OwnedAlbum");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ScreenName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserInfo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("VinylApp.Domain.Models.VinylAppModels.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("GroupMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VinylApp.Domain.Models.VinylAppModels.GroupAggregate.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.UserAggregate.Auth.AuthUser", b =>
                {
                    b.HasOne("VinylApp.Domain.Models.VinylAppModels.UserAggregate.User", "User")
                        .WithOne("UserAuthorization")
                        .HasForeignKey("VinylApp.Domain.Models.VinylAppModels.UserAggregate.Auth.AuthUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.UserAggregate.OwnedAlbum", b =>
                {
                    b.HasOne("VinylApp.Domain.Models.VinylAppModels.AlbumAggregate.AlbumItem", "AlbumItem")
                        .WithMany()
                        .HasForeignKey("AlbumItemId");

                    b.HasOne("VinylApp.Domain.Models.VinylAppModels.UserAggregate.User", "User")
                        .WithMany("Albums")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VinylApp.Domain.Models.VinylAppModels.UserAggregate.User", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("UserAuthorization");
                });
#pragma warning restore 612, 618
        }
    }
}
